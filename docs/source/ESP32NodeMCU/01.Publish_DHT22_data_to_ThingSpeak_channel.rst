.. _ESP32_NodeMCU_Publish_DHT22_data_to_local_Mosquitto_server_and_ThingSpeak_Channel:

********************************************************************************
Publish DHT22 sensor data to local Mosquitto server and ThingSpeak Channel
********************************************************************************

|

.. toctree::
   :maxdepth: 2


Things required
===========================


1. ESP32 NodeMCU

2. DHT22 humidity and temperature sensor

3. Raspberry Pi 3

4. Breadboard

5. Jumper wires



Pre-requisites
=================

* Arduino Software (IDE), download from `arduino.cc <https://www.arduino.cc/en/Main/Software>`_ 

* Arduino ESP32 support on windows. `Arduino-ESP32 <https://github.com/espressif/arduino-esp32/blob/master/docs/arduino-ide/windows.md>`_

* Mosquitto MQTT server on Raspberry Pi 3

* `DHTesp library`, download from `DHTesp <https://github.com/beegee-tokyo/DHTesp/>`_

* Account on `ThingSpeak <https://thingspeak.com>`_

* WiFi connection



Overview
-----------

`ESP32 NodeMCU` micro-controller collects temperature and humidity reading from `DHT22` sensor, using `WiFi` connectivity publishes payload to `MQTT` server running on `Raspberry Pi 3` and also publish payload to `ThingSpeak` server and readings can be seen on `ThingSpeak` public channel. 

Local `MQTT` server on `Raspberry Pi 3` is used for test/debug purpose only. 


Result
-------

Readings on `ThingSpeak` public channel: https://thingspeak.com/channels/470442


ESP32 NodeMCU
---------------

`ESP32 <https://www.espressif.com/en/products/hardware/esp32/overview>`_ is a successor of ESP8266 released by express-if.  

.. tip::
    There are 34 distinct GPIOs available on the ESP32 NodeMCU. They are identified as:

    • GPIO_NUM_0 – GPIO_NUM_19
    • GPIO_NUM_21 – GPIO_NUM_23
    • GPIO_NUM_25 – GPIO_NUM_27
    • GPIO_NUM_32 – GPIO_NUM_39

    The ones that are omitted are 20, 24, 28, 29, 30 and 31.

.. note::
    **Pin Restrictions:**

    GPIO_NUM_34 – GPIO_NUM_39 are input mode only. You can not use these pins for signal output. 

    Also, pins 6, 7, 8, 9, 10 and 11 are used to interact with the SPI flash chip. You can not use those for other purposes.


|


Arduino Sketch
----------------


Initial settings
^^^^^^^^^^^^^^^^^^^^

::


    #include <WiFi.h>                       // WiFi network
    #include <PubSubClient.h>               // Publishes payload on MQTT server

    #include "DHTesp.h"                     // download library from https://github.com/beegee-tokyo/DHTesp

    #include "ESP32Ticker.h"                // Ticker library has been merged into the Arduino core for ESP32

    int ledPin = 32;                        // For testing/debugging



WiFi settings
^^^^^^^^^^^^^^^^^^^^

::

    const char* ssid = "enter_your_SSID_here";      // WiFi SSID
    const char* pwd = "enter_your_Password_here";   // WiFi Password


.. note::
    Replace `ssid` and `pwd` with your `WiFi SSID` and `password`.
    

Number of attempts
^^^^^^^^^^^^^^^^^^^

::

    byte noOfAttemptForWiFiConn = 30;       // Number of attempts, give user to try for WiFi & MQTT server connection. 
                                            // 120 = 1 minute. Restricting infinite attempts

.. note::
    Restricting infinite loop with number of attempts.

    variable `noOfAttemptForWiFiConn`, checks how many number of attempts user has made, once reaches to the threshold stops in establishing the connecting. 



MQTT Server details running on Raspberry Pi 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::


    /*
     * MQTT Server
     */
    const char* MQTTServer = "192.168.43.92";               // Yours may be different
    const int MQTTPort = 1883;
    const char* MQTTUser = "";
    const char* MQTTPwd = "";
    const char* Mqqt_getTemperature = "home/room2/temperature"; // Topic
    const char* Mqqt_getHumidity = "home/room2/humidity";       // Topic
    const char* clientID = "ESP32Client";                   // The client id identifies the ESP32 device. 
                                                            // Think of it a bit like a hostname 
                                                            // (Or just a name, like Sharad).

    const char* thsclientID = "ThinkSpeakClient";           // The client id identifies the ESP32 device. 
                                                            

ThinkSpeak Server settings
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

    /*
     * ThinkSpeak Server settings:
     * char* topic="channels/<channel_ID/publish/<channelAPI>
     * Channel_ID - Your channel Id
     * Channel API - Your API Key
     */
    char* thinkSpeakTopic = "channels/enter_your_channel_id_here/publish/enter_your_API_key_here"; 
    char* thinkSpeakServer = "mqtt.thingspeak.com";

.. note::
    Copy `channel id` and `API` key from ThingSpeak server.    



Object of class WiFiClient
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

    /*
     *  Object of class WiFiClient allows to establish a connection to a defined IP and port. 
     *  Nevertheless, we will not explicitly use this object because it will be used by the MQTT library under the hood.
     */
    WiFiClient espClient;
    WiFiClient thsWiFiClient;
    //PubSubClient psClient(espClient);
    PubSubClient psClient(MQTTServer, MQTTPort, espClient);
    PubSubClient thsClient(thinkSpeakServer, MQTTPort, thsWiFiClient);



DHT22 Sensor settings
^^^^^^^^^^^^^^^^^^^^^^^^^^

::

    /*
     * DHT22 Sensor 
    */
    #define DHTPIN 16                     // Pin connected to the DHT sensor.
    #define DHTTYPE           DHT22       // DHT 22 (AM2302)

    DHTesp dhtEsp22;


Function definition
^^^^^^^^^^^^^^^^^^^^^^^

::

    void tempTask(void *pvParameters);
    bool getTemperature();
    void triggerGetTemp();


Initialization
^^^^^^^^^^^^^^^^^^

::


    /** Task handle for the light value read task */
    TaskHandle_t tempTaskHandle = NULL;
    /** Ticker for temperature reading */
    Ticker tempTicker;
    /** Comfort profile */
    ComfortState cf;
    /** Flag if task should run */
    bool tasksEnabled = false;



WiFi connection & disconnection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

    /*
     * function to connecting a selected ssid network
    */
    void connect_WiFi_Network(){

      // Connecting a WiFi access point
      WiFi.begin(ssid, pwd);

      byte tryConn = 0;

      Serial.println("------------------------------------------");

      while(WiFi.status() != WL_CONNECTED){
        delay(500);
        Serial.print(". ");        // Every dot represent a number of attempts
        /*
         *  Can't go forever
         *  check here how many number of attempts user has made
         */
         tryConn++;
         if(tryConn > noOfAttemptForWiFiConn){
          break;
         }
      }

        /*
         // Debugging purpose
        Serial.print("\nTryConn: ");
        Serial.println(tryConn);
        Serial.print("noOfAttemptForWiFiConn: ");
        Serial.println(noOfAttemptForWiFiConn);
        */

     /*   
      *    Debugging purpose to which WiFi network, ESP32 board is connected
      *    Comment in production
     */
     if(WiFi.status() == WL_CONNECTED){
        Serial.println("");
        Serial.println("------------------------------------------");
        Serial.print("Connected to WiFi network: ");
        Serial.println(ssid);
        Serial.print("Local IP: ");
        Serial.println(WiFi.localIP());
        Serial.print("MAC Address: ");
        Serial.println(WiFi.macAddress()); 
        Serial.print("Encryption Type: ");
        //String translateEncrytionType = translateEncryptionType(WiFi.encryptionType(0));
        Serial.println(WiFi.encryptionType(0));
        Serial.println("------------------------------------------");
        delay(10);
     } 
      

      /*
       * Show user a message if not connected
       */
      if(WiFi.status() != WL_CONNECTED){
        Serial.println("------------------------------------------");
        Serial.print("WiFi not connected!!! You have exhausted all of your (");
        Serial.print(noOfAttemptForWiFiConn);
        Serial.println(") attempts for connecting to a WiFi network.");
        Serial.println("------------------------------------------");
      }
    }


    /*
     * Disconnect to a connected WiFi network
     */
    void disconnect_network(){
        WiFi.disconnect(true);            // Pass "true" to disconnect from WiFi network.
        Serial.println("Disconnected.");
        Serial.print("Local IP: ");
        Serial.println(WiFi.localIP());
    }



Initialize temperature sensor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

    /**
     * initTemp
     * Setup DHT library
     * Setup task and timer for repeated measurement
     * @return bool
     *    true if task and timer are started
     *    false if task or timer couldn't be started
    */
    bool initTemp() {
      byte resultValue = 0;
      // Initialize temperature sensor
      dhtEsp22.setup(DHTPIN, DHTesp::DHT22);
      Serial.println("DHT initiated");

      // Start task to get temperature
      xTaskCreatePinnedToCore(
          tempTask,                       /* Function to implement the task */
          "tempTask ",                    /* Name of the task */
          4000,                           /* Stack size in words */
          NULL,                           /* Task input parameter */
          5,                              /* Priority of the task */
          &tempTaskHandle,                /* Task handle. */
          1);                             /* Core where the task should run */

      if (tempTaskHandle == NULL) {
        Serial.println("Failed to start task for temperature update");
        return false;
      } else {
           Serial.println("Environment data update in every (20) seconds...");
        // Start update of environment data every 20 seconds
        //   tempTicker.attach(20, triggerGetTemp);
        // Start update of environment data every 60 seconds
           tempTicker.attach(60, triggerGetTemp);
           Serial.println("");
      }
      return true;
    }

    /**
     * triggerGetTemp
     * Sets flag dhtUpdated to true for handling in loop()
     * called by Ticker getTempTimer
     */
    void triggerGetTemp() {
      if (tempTaskHandle != NULL) {
         xTaskResumeFromISR(tempTaskHandle);
      }
    }


Task to read temperature from DHT22 sensor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

    /**
     * Task to reads temperature from DHT22 sensor
     * @param pvParameters
     *    pointer to task parameters
     */
    void tempTask(void *pvParameters) {
      Serial.println("tempTask loop started");
      while (1) // tempTask loop
      {
        if (tasksEnabled) {
          // Get temperature values
          getTemperature();
        }
        // Got sleep again
        vTaskSuspend(NULL);
      }
    }


Read and publish temperature
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

    **
     * getTemperature
     * Reads temperature from DHT22 sensor
     * @return bool
     *    true if temperature could be acquired
     *    false if acquisition failed
    */
    bool getTemperature() {
      // Reading temperature for humidity takes about 250 milliseconds!
      // Sensor readings may also be up to 2 seconds 'old' (it's a very slow sensor)
      TempAndHumidity newValues = dhtEsp22.getTempAndHumidity();
      // Check if any reads failed and exit early (to try again).
      if (dhtEsp22.getStatus() != 0) {
        Serial.println("DHT22 error status: " + String(dhtEsp22.getStatusString()));
        return false;
      }

      float heatIndex = dhtEsp22.computeHeatIndex(newValues.temperature, newValues.humidity);
      float dewPoint = dhtEsp22.computeDewPoint(newValues.temperature, newValues.humidity);
      float cr = dhtEsp22.getComfortRatio(cf, newValues.temperature, newValues.humidity);

      String comfortStatus;
      switch(cf) {
        case Comfort_OK:
          comfortStatus = "Comfort_OK";
          break;
        case Comfort_TooHot:
          comfortStatus = "Comfort_TooHot";
          break;
        case Comfort_TooCold:
          comfortStatus = "Comfort_TooCold";
          break;
        case Comfort_TooDry:
          comfortStatus = "Comfort_TooDry";
          break;
        case Comfort_TooHumid:
          comfortStatus = "Comfort_TooHumid";
          break;
        case Comfort_HotAndHumid:
          comfortStatus = "Comfort_HotAndHumid";
          break;
        case Comfort_HotAndDry:
          comfortStatus = "Comfort_HotAndDry";
          break;
        case Comfort_ColdAndHumid:
          comfortStatus = "Comfort_ColdAndHumid";
          break;
        case Comfort_ColdAndDry:
          comfortStatus = "Comfort_ColdAndDry";
          break;
        default:
          comfortStatus = "Unknown:";
          break;
      };

      // Show all readings on serial port
      Serial.println(" Temp.:" + String(newValues.temperature) + "*C; Humid.:" + String(newValues.humidity) + "%; Heat Index:" + String(heatIndex) + "; Dew Point:" + String(dewPoint) + "; " + comfortStatus);

      char tmpMsgBuffer[20];                     // make sure this is big enough to hold your string
      char hmdMsgBuffer[20];                     // make sure this is big enough to hold your string
      char* pointer_to_temp_string;
      char* pointer_to_humid_string;

      pointer_to_temp_string = dtostrf(newValues.temperature, 6, 2, tmpMsgBuffer);
      pointer_to_humid_string = dtostrf(newValues.humidity, 6, 2, hmdMsgBuffer);

      /*
      //Debugging purpose - reading get converted into String correctly
      Serial.println(pointer_to_temp_string);
      Serial.println(pointer_to_humid_string);
      Serial.println("----");    
      */

        // Publish sensor reading on MQTT broker
      
        // Temperature
        if (psClient.publish(Mqqt_getTemperature, pointer_to_temp_string)){
          Serial.println("Temperature reading published!");
        } else {
          Serial.println("Temperature failed to send. Reconnecting to MQTT Broker and trying again");
          psClient.connect(clientID);
          delay(10); // This delay ensures that client.publish doesn't clash with the client.connect call
          psClient.publish(Mqqt_getTemperature, pointer_to_temp_string);    
        }
      
        // Humidity
        if (psClient.publish(Mqqt_getHumidity, pointer_to_humid_string)){
          Serial.println("Humidity reading published!");
        } else {
          Serial.println("Humidity failed to send. Reconnecting to MQTT Broker and trying again");
          psClient.connect(clientID);
          delay(10); // This delay ensures that client.publish doesn't clash with the client.connect call
          psClient.publish(Mqqt_getHumidity, pointer_to_humid_string);    
        }

       // Publish sensor reading on ThinkSpeak Server

        String payload="field1=";
        payload += pointer_to_temp_string;
        payload += "&field2=";
        payload += pointer_to_humid_string;
        payload += "&status=MQTTPUBLISH";

        Serial.print("Sending payload: ");
        Serial.println(payload);

        if (!thsClient.connected()){
          thsClient.connect(thsclientID);
        }      

        if (thsClient.connected()){
            // publishing payload in one go
            if (thsClient.publish(thinkSpeakTopic, (char*) payload.c_str())){
              Serial.println("Payload published!");
            } else {
              Serial.println("Publish failed to send on ThinkSpeak server. Reconnecting to MQTT Broker and trying again");
            }
        } else {
          Serial.println("\nConnection to ThinkSpeak MQTT Broker failed...");
          Serial.print("failed with state: ");
          Serial.print(thsClient.state());
          Serial.println("\n------------------------------------------");
        } 
       
      
          Serial.println("\n------------------------------------------");
      
      return true;
    }


Connect to ThingSpeak server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

    void connect_ThinkSpeak_Server(){
      
      //psClient.setServer(MQTTServer, MQTTPort);

      byte tryConn = 0;

      Serial.println("------------------------------------");
      Serial.println("Connecting to ThinkSpeak broker...");


        // Connect to MQTT Broker
       while (!thsClient.connected()) {
            delay(20);
            Serial.print(". ");
      
           //  Can't go forever
           //  check here how many number of attempts user has made
           tryConn++;
           if(tryConn > noOfAttemptForWiFiConn){
            break;
           }
          
        } //end while

        // Connected
        if (thsClient.connect(thsclientID)) {
          Serial.println("\nThinkSeak MQTT server connected!");
        } else {
         // Show reason of not connecting to user 
          Serial.println("\nConnection to ThinkSpeak MQTT Broker failed...");
          Serial.print("failed with state ");
          Serial.print(thsClient.state());
          Serial.println("\n------------------------------------------");
        }
    }


Connect to MQTT server
^^^^^^^^^^^^^^^^^^^^^^^^^^

::


    void connect_MQTT_Server(){
      
      //psClient.setServer(MQTTServer, MQTTPort);

      byte tryConn = 0;

      Serial.println("------------------------------------");
      Serial.println("Connecting to MQTT broker...");


        // Connect to MQTT Broker
       while (!psClient.connected()) {
            delay(20);
            Serial.print(". ");
      
           //  Can't go forever
           //  check here how many number of attempts user has made
           tryConn++;
           if(tryConn > noOfAttemptForWiFiConn){
            break;
           }
          
        } //end while

        // Connected
        if (psClient.connect(clientID)) {
          Serial.println("\nMQTT broker connected!");
        } else {
         // Show reason of not connecting to user 
          Serial.println("\nConnection to MQTT Broker failed...");
          Serial.print("failed with state ");
          Serial.print(psClient.state());
          Serial.println("\n------------------------------------------");
        }
    }


setup function
^^^^^^^^^^^^^^^^^^
::

    void setup() {
 
      Serial.begin(115200);
      
      pinMode(ledPin, OUTPUT);          // Test LED

      pinMode(DHTPIN, INPUT);           // DHT22

      /*    
       *     Required in setup before connecting a WiFi network as station
       */
      // Set WiFi to station mode and disconnect from an Access Point (AP); if it was previously connected
      WiFi.mode(WIFI_STA);
      WiFi.disconnect();
      delay(100);
      connect_WiFi_Network();          // Re-connect to a WiFi network

      
      Serial.println("DHT ESP32 example with tasks");
      initTemp();

      connect_MQTT_Server();                // Connect to MQTT Server

      connect_ThinkSpeak_Server();          // Connect to ThingSpeak Server

      Serial.print("Topic for local MQTT servers: ");
      Serial.println(Mqqt_getTemperature);
      Serial.println(Mqqt_getHumidity);

      Serial.print("Topic for ThinkSpeak servers: ");
      Serial.println(thinkSpeakTopic);

      Serial.println("\nSetup done"); 

      // Disconnect from WiFi network when done
      // disconnect_network();

    }


loop function
^^^^^^^^^^^^^^^^^^

::

    void loop() {

      digitalWrite(ledPin, HIGH);

      if (!tasksEnabled) {
        // Wait 2 seconds to let system settle down
        delay(2000);
        // Enable task that will read values from the DHT sensor
        tasksEnabled = true;
        if (tempTaskHandle != NULL) {
          vTaskResume(tempTaskHandle);
        }
      } 
      

      digitalWrite(ledPin, LOW);
      yield();

    }




Testing/Debug 
---------------



Complete code 
---------------

Download complete code. :download:`DHT22_data_on_ThinkSpeak_Channel.ino <../_static/source_code/arduino_esp32_dht22/DHT22_data_on_ThinkSpeak_Channel.ino>`  

